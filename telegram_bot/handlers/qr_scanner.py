import logging
import re
import requests
import cv2
import numpy as np
from pyzbar.pyzbar import decode

from aiogram import Router, F
from aiogram.types import Message, PhotoSize, InlineKeyboardMarkup, InlineKeyboardButton
from telegram_bot.services.access_control import get_user_info

router = Router()
logger = logging.getLogger(__name__)

QR_API_URL = "http://10.0.0.4/Api/Card/GetBalanceAndHistory"
API_KEY = "APIKEYGLOBAL"

def extract_card_number(qr_data: str) -> str | None:
    match = re.search(r"f_persAcc=(\d+)", qr_data)
    return match.group(1) if match else None

@router.message(F.photo)
async def global_qr_handler(message: Message):
    """
    –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –æ—Ç –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    username = message.from_user.username
    from telegram_bot.services.access_control import get_user_info
    info = get_user_info(username)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–ª–∏ –≤—ã—Å—ã–ª–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    if not info or not info.get("roles"):
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–æ—Ç–æ.")
        return

    # –ï—Å—Ç—å —Ä–æ–ª—å, –∑–Ω–∞—á–∏—Ç –º–æ–∂–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å
    await message.answer("‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é QR-–∫–æ–¥...")

    photo: PhotoSize = message.photo[-1]
    file = await message.bot.get_file(photo.file_id)
    file_bytes = await message.bot.download_file(file.file_path)

    # –†–∞—Å–ø–æ–∑–Ω–∞—ë–º —á–µ—Ä–µ–∑ opencv + pyzbar
    import io
    img_array = np.frombuffer(file_bytes.read(), np.uint8)
    img = cv2.imdecode(img_array, cv2.IMREAD_COLOR)

    decoded = decode(img)
    if not decoded:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å QR. –í–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –Ω–µ QR-–∫–æ–¥.")
        return

    qr_text = decoded[0].data.decode("utf-8")
    logger.info(f"QR data from @{username}: {qr_text}")

    card_number = extract_card_number(qr_text)
    if not card_number:
        await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ f_persAcc –≤ QR-–∫–æ–¥–µ.")
        return

    # –ó–∞–ø—Ä–æ—Å –∫ API
    try:
        resp = requests.get(QR_API_URL, params={
            "cardNumber": card_number,
            "apikey": API_KEY
        }, timeout=10)
        resp.raise_for_status()

        data = resp.json()
        balance = data.get("Balance", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        history = data.get("BalanceHistory", [])

        text = f"**–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã**: `{card_number}`\n" \
               f"**–ë–∞–ª–∞–Ω—Å**: `{balance}`\n\n"

        if history:
            text += "**–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π**:\n"
            for h in history:
                sign = "+" if h.get("isReplenishment") else "-"
                val = h.get("value", "?")
                dt = h.get("date", "?")
                place = h.get("parkObjectName", "")
                text += f"{dt} {sign}{val} {place}\n"

        # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é —Ä–æ–ª—å –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        user_roles = info["roles"]
        main_role = user_roles[0] if user_roles else "operator"

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë", callback_data="qr_again"),
                InlineKeyboardButton(text="–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data=f"back_to_menu:{main_role}")
            ]
        ])

        await message.answer(text, parse_mode="Markdown", reply_markup=keyboard)

    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.")

@router.callback_query(F.data == "qr_again")
async def handle_qr_again(callback):
    """
    –ö–Ω–æ–ø–∫–∞ ¬´–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë¬ª - —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø—Ä–æ—Å–∏–º –ø—Ä–∏—Å–ª–∞—Ç—å –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ
    """
    try:
        await callback.message.delete()
    except:
        pass

    await callback.message.answer("üì∑ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ —Å QR-–∫–æ–¥–æ–º...")
    await callback.answer()
