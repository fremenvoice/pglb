# telegram_bot/handlers/qr_scanner.py

import logging
import re
import requests
import cv2
import numpy as np
from pyzbar.pyzbar import decode

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message,
    PhotoSize,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    CallbackQuery
)
from telegram_bot.services.access_control import get_user_info

router = Router()
logger = logging.getLogger(__name__)

QR_API_URL = "http://10.0.0.4/Api/Card/GetBalanceAndHistory"
QR_API_KEY = "APIKEYGLOBAL"

def extract_card_number(qr_data: str) -> str|None:
    match = re.search(r"f_persAcc=(\d+)", qr_data)
    return match.group(1) if match else None

@router.message(F.photo)
async def global_qr_handler(message: Message, state: FSMContext):
    """
    –ï—Å–ª–∏ user –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º QR.
    –î–û —ç—Ç–æ–≥–æ —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é (active_message_ids) ‚Äî —á—Ç–æ–±—ã ¬´—Å—Ç–∞—Ä—ã–π¬ª –ø—É–Ω–∫—Ç –º–µ–Ω—é –Ω–µ –≤–∏—Å–µ–ª.
    –ï—Å–ª–∏ scanning_role=None => –±–µ—Ä–µ–º subrole (–µ—Å–ª–∏ –∞–¥–º–∏–Ω –≤—ã–±—Ä–∞–ª operator/consultant) –∏–ª–∏ user_role.
    –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ: –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞, –≤ chat –æ—Å—Ç–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.
    """
    username = message.from_user.username
    info = get_user_info(username)
    if not info or not info["roles"]:
        logger.info(f"@{username} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ñ–æ—Ç–æ.")
        return

    data = await state.get_data()
    user_role = info["roles"][0]
    admin_subrole = data.get("admin_subrole")  # None / "operator" / "consultant"
    scanning_role = data.get("scanning_role")  # None / "operator" / "consultant" / "admin"

    # 1) –°–Ω–æ—Å–∏–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é (–µ—Å–ª–∏ –µ—Å—Ç—å). –¢–∞–∫ –Ω–µ –±—É–¥–µ—Ç ¬´—Ö–≤–æ—Å—Ç–æ–≤¬ª.
    active_ids = data.get("active_message_ids", [])
    for msg_id in active_ids:
        try:
            await message.bot.delete_message(message.chat.id, msg_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")

    # –û—á–∏—Å—Ç–∏–º, –ø–æ—Ç–æ–º—É —á—Ç–æ —Å–µ–π—á–∞—Å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    data["active_message_ids"] = []
    await state.update_data(data)

    # 2) –û–ø—Ä–µ–¥–µ–ª—è–µ–º scanning_role
    if not scanning_role:
        scanning_role = admin_subrole or user_role
        data["scanning_role"] = scanning_role
        await state.update_data(data)

    # 3) ¬´–†–∞—Å–ø–æ–∑–Ω–∞—é QR...¬ª
    progress_msg = await message.answer("üì∏ –†–∞—Å–ø–æ–∑–Ω–∞—é QR-–∫–æ–¥...")

    # –ó–∞–ø–æ–º–Ω–∏–º –∏–¥
    active_ids = data["active_message_ids"]
    active_ids.append(progress_msg.message_id)
    active_ids.append(message.message_id)  # —Ñ–æ—Ç–æ
    data["active_message_ids"] = active_ids
    await state.update_data(data)

    # 4) –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏ –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å
    photo: PhotoSize = message.photo[-1]
    file = await message.bot.get_file(photo.file_id)
    file_bytes = await message.bot.download_file(file.file_path)

    img_array = np.frombuffer(file_bytes.read(), np.uint8)
    img = cv2.imdecode(img_array, cv2.IMREAD_COLOR)
    decoded = decode(img)

    if not decoded:
        await progress_msg.delete()
        kb = _qr_keyboard(scanning_role)
        err_msg = await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å QR.", reply_markup=kb)
        data["active_message_ids"].append(err_msg.message_id)
        await state.update_data(data)
        return

    qr_text = decoded[0].data.decode("utf-8")
    card_number = extract_card_number(qr_text)
    if not card_number:
        await progress_msg.delete()
        kb = _qr_keyboard(scanning_role)
        e_msg = await message.answer("‚ùå –í QR-–∫–æ–¥–µ –Ω–µ—Ç f_persAcc.", reply_markup=kb)
        data["active_message_ids"].append(e_msg.message_id)
        await state.update_data(data)
        return

    # 5) –ó–∞–ø—Ä–æ—Å –∫ API
    try:
        resp = requests.get(QR_API_URL, params={
            "cardNumber": card_number,
            "apikey": QR_API_KEY
        }, timeout=10)
        resp.raise_for_status()
        data_api = resp.json()

        balance = data_api.get("Balance", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        history = data_api.get("BalanceHistory", [])

        text = f"**–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã**: `{card_number}`\n" \
               f"**–ë–∞–ª–∞–Ω—Å**: `{balance}`\n\n"
        if history:
            text += "**–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π**:\n"
            for h in history:
                sign = "+" if h.get("isReplenishment") else "-"
                val = h.get("value","?")
                dt = h.get("date","?")
                place = h.get("parkObjectName","")
                text += f"{dt} {sign}{val} {place}\n"

        await progress_msg.delete()
        kb = _qr_keyboard(scanning_role)
        r_msg = await message.answer(text, parse_mode="Markdown", reply_markup=kb)
        data["active_message_ids"].append(r_msg.message_id)
        await state.update_data(data)

    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        await progress_msg.delete()
        kb = _qr_keyboard(scanning_role)
        e_msg = await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.", reply_markup=kb)
        data["active_message_ids"].append(e_msg.message_id)
        await state.update_data(data)

@router.callback_query(F.data == "qr_again")
async def handle_qr_again(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    try:
        await callback.message.delete()
    except:
        pass

    new_msg = await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ —Å QR-–∫–æ–¥–æ–º.")
    data["active_message_ids"].append(new_msg.message_id)
    await state.update_data(data)
    await callback.answer()


def _qr_keyboard(scanning_role: str) -> InlineKeyboardMarkup:
    """
    –ï—Å–ª–∏ scanning_role='admin' => ¬´–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏¬ª => admin_back
    –ò–Ω–∞—á–µ => back_to_menu:{operator/consultant} => ¬´–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é¬ª
    """
    if scanning_role == "admin":
        back_callback = "admin_back"
        back_text = "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏"
    else:
        back_callback = f"back_to_menu:{scanning_role}"
        back_text = "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"

    return InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë", callback_data="qr_again"),
            InlineKeyboardButton(text=back_text, callback_data=back_callback)
        ]]
    )
