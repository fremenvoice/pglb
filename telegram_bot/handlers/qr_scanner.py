import logging
import re
import requests
import cv2
import numpy as np
from pyzbar.pyzbar import decode

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message, 
    PhotoSize, 
    InlineKeyboardMarkup, 
    InlineKeyboardButton, 
    CallbackQuery
)
from telegram_bot.services.access_control import get_user_info

router = Router()
logger = logging.getLogger(__name__)

QR_API_URL = "http://10.0.0.4/Api/Card/GetBalanceAndHistory"
QR_API_KEY = "APIKEYGLOBAL"

def extract_card_number(qr_data: str) -> str | None:
    match = re.search(r"f_persAcc=(\d+)", qr_data)
    return match.group(1) if match else None

@router.message(F.photo)
async def global_qr_handler(message: Message, state: FSMContext):
    """
    –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä —Ñ–æ—Ç–æ. 
    –ü—Ä–æ–≤–µ—Ä—è–µ–º scanning_role => –µ—Å–ª–∏ None, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Ñ–æ—Ç–æ.
    –ò–Ω–∞—á–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–µ–º QR, –≤—ã–≤–æ–¥–∏–º –∫–Ω–æ–ø–∫–∏: "–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë", "–í–µ—Ä–Ω—É—Ç—å—Å—è".
    –£ –∞–¥–º–∏–Ω–∞ => "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏" (admin_back),
    —É operator/consultant => "back_to_menu:operator/consultant"
    """
    username = message.from_user.username
    info = get_user_info(username)
    if not info or not info["roles"]:
        logger.info(f"@{username} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–æ—Ç–æ.")
        return

    data = await state.get_data()
    scanning_role = data.get("scanning_role")  # admin / operator / consultant / None
    if not scanning_role:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–∏–º–∞–ª "qr_scanner.md" => –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        return

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º ID —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
    active_ids = data.get("active_message_ids", [])
    active_ids.append(message.message_id)
    await state.update_data(active_message_ids=active_ids)

    # "–†–∞—Å–ø–æ–∑–Ω–∞—é QR..."
    progress_msg = await message.answer("üì∏ –†–∞—Å–ø–æ–∑–Ω–∞—é QR-–∫–æ–¥...")
    active_ids.append(progress_msg.message_id)
    await state.update_data(active_message_ids=active_ids)

    # –°–∫–∞—á–∏–≤–∞–µ–º
    photo: PhotoSize = message.photo[-1]
    file = await message.bot.get_file(photo.file_id)
    file_bytes = await message.bot.download_file(file.file_path)
    img_array = np.frombuffer(file_bytes.read(), np.uint8)
    img = cv2.imdecode(img_array, cv2.IMREAD_COLOR)

    decoded = decode(img)
    if not decoded:
        await progress_msg.delete()
        kb = _qr_keyboard(scanning_role)
        err_msg = await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å QR.", reply_markup=kb)
        active_ids.append(err_msg.message_id)
        await state.update_data(active_message_ids=active_ids)
        return

    qr_text = decoded[0].data.decode("utf-8")
    card_number = extract_card_number(qr_text)
    if not card_number:
        await progress_msg.delete()
        kb = _qr_keyboard(scanning_role)
        err_msg = await message.answer("‚ùå –í QR-–∫–æ–¥–µ –Ω–µ—Ç f_persAcc.", reply_markup=kb)
        active_ids.append(err_msg.message_id)
        await state.update_data(active_message_ids=active_ids)
        return

    # –ó–∞–ø—Ä–æ—Å –∫ API
    try:
        resp = requests.get(QR_API_URL, params={"cardNumber": card_number, "apikey": QR_API_KEY}, timeout=10)
        resp.raise_for_status()
        data_api = resp.json()

        balance = data_api.get("Balance", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        history = data_api.get("BalanceHistory", [])

        text = f"**–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã**: `{card_number}`\n**–ë–∞–ª–∞–Ω—Å**: `{balance}`\n\n"
        if history:
            text += "**–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π**:\n"
            for h in history:
                sign = "+" if h.get("isReplenishment") else "-"
                val = h.get("value","?")
                dt = h.get("date","?")
                place = h.get("parkObjectName","")
                text += f"{dt} {sign}{val} {place}\n"

        await progress_msg.delete()
        kb = _qr_keyboard(scanning_role)
        result_msg = await message.answer(text, parse_mode="Markdown", reply_markup=kb)
        active_ids.append(result_msg.message_id)
        await state.update_data(active_message_ids=active_ids)

    except requests.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: {e}")
        await progress_msg.delete()
        kb = _qr_keyboard(scanning_role)
        err_msg = await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ —Å–µ—Ä–≤–µ—Ä—É.", reply_markup=kb)
        active_ids.append(err_msg.message_id)
        await state.update_data(active_message_ids=active_ids)

@router.callback_query(F.data == "qr_again")
async def handle_qr_again(callback: CallbackQuery, state: FSMContext):
    try:
        await callback.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    data = await state.get_data()
    active_ids = data.get("active_message_ids", [])
    new_msg = await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Ñ–æ—Ç–æ —Å QR-–∫–æ–¥–æ–º.")
    active_ids.append(new_msg.message_id)
    await state.update_data(active_message_ids=active_ids)

    await callback.answer()

def _qr_keyboard(scanning_role: str) -> InlineKeyboardMarkup:
    """
    –ï—Å–ª–∏ admin => "–í–µ—Ä–Ω—É—Ç—å—Å—è" -> admin_back
    –ò–Ω–∞—á–µ => back_to_menu:operator/consultant
    """
    if scanning_role == "admin":
        back_callback = "admin_back"
        back_text = "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏"
    else:
        back_callback = f"back_to_menu:{scanning_role}"
        back_text = "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"

    return InlineKeyboardMarkup(
        inline_keyboard=[[
            InlineKeyboardButton(text="–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë", callback_data="qr_again"),
            InlineKeyboardButton(text=back_text, callback_data=back_callback)
        ]]
    )
