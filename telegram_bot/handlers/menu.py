import logging
import os

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, FSInputFile

from telegram_bot.services.access_control import get_user_info
from telegram_bot.services.text_service import get_text_block, render_welcome
from telegram_bot.domain.menu_registry import menu_by_role
from telegram_bot.keyboards.inline import (
    get_menu_inline_keyboard_for_role,
    get_admin_role_choice_keyboard,
    get_back_to_menu_keyboard
)
from telegram_bot.core.states import AdminMenuContextState, QRScannerState

router = Router()
logger = logging.getLogger(__name__)

@router.callback_query(F.data.startswith("menu:"))
async def handle_menu_callback(callback: CallbackQuery, state: FSMContext):
    username = callback.from_user.username
    label = callback.data.split("menu:")[1]

    info = get_user_info(username)
    if not info or not info["roles"]:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    data = await state.get_data()
    role = data.get("role") or info["roles"][0]
    menu = menu_by_role.get(role, [])

    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é
    try:
        await callback.message.delete()
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –º–µ–Ω—é: {e}")

    for item_label, filename in menu:
        if item_label == label:
            text = get_text_block(filename)

            # –ú–∞—Å—Å–∏–≤ message_ids –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ
            message_ids = []

            # 1) "–ü–æ—Å–µ—Ç–∏—Ç–µ–ª–∏" –∏–ª–∏ "–ß–ü" ‚Üí —Ç–µ–∫—Å—Ç + –∫–∞—Ä—Ç–∏–Ω–∫–∞
            if filename in ("visitors.md", "emergency.md"):
                sent_text_msg = await callback.message.answer(text)
                message_ids.append(sent_text_msg.message_id)

                img_filename = "sitmap.png" if filename == "visitors.md" else "fireext.png"
                img_path = os.path.join("telegram_bot", "domain", "img", img_filename)

                sent_photo_msg = await callback.message.answer_photo(
                    photo=FSInputFile(img_path),
                    reply_markup=get_back_to_menu_keyboard(role)
                )
                message_ids.append(sent_photo_msg.message_id)

            # 2) "qr_scanner.md" ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –∏ –ø–µ—Ä–µ–≤–æ–¥–∏–º –≤ FSM –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —Ñ–æ—Ç–æ
            elif filename == "qr_scanner.md":
                sent_msg = await callback.message.answer(text)
                message_ids.append(sent_msg.message_id)

                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ ‚Üí –∂–¥—ë–º —Ñ–æ—Ç–æ
                await state.set_state(QRScannerState.waiting_for_photo)

            # 3) –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–∞–∑–¥–µ–ª—ã ‚Üí —Ç–µ–∫—Å—Ç + –∫–Ω–æ–ø–∫–∞
            else:
                sent_msg = await callback.message.answer(
                    text,
                    reply_markup=get_back_to_menu_keyboard(role)
                )
                message_ids.append(sent_msg.message_id)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            await state.update_data(active_message_ids=message_ids)
            await callback.answer()
            return

    await callback.answer("‚ö†Ô∏è –†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@router.callback_query(F.data.startswith("admin_menu:"))
async def handle_admin_menu_choice(callback: CallbackQuery, state: FSMContext):
    choice = callback.data.split("admin_menu:")[1]
    username = callback.from_user.username
    info = get_user_info(username)

    if not info or "admin" not in info.get("roles", []):
        await callback.answer("‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    await state.update_data(role=choice)

    if choice == "none":
        text = get_text_block("about_park.md")
        kb = get_menu_inline_keyboard_for_role("admin", only_back=True)
        await callback.message.edit_text(text, reply_markup=kb)
    else:
        kb = get_menu_inline_keyboard_for_role(choice)
        await callback.message.edit_text(f"üìã –ú–µ–Ω—é —Ä–æ–ª–∏: {choice}", reply_markup=kb)

    await callback.answer()


@router.callback_query(F.data == "admin_back")
async def handle_admin_back(callback: CallbackQuery, state: FSMContext):
    username = callback.from_user.username
    info = get_user_info(username)

    if not info or "admin" not in info.get("roles", []):
        await callback.answer("‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    full_name = info["full_name"]
    text = render_welcome(full_name, "admin")
    kb = get_admin_role_choice_keyboard()

    await state.clear()
    await callback.message.edit_text(text, reply_markup=kb)
    await callback.answer()


@router.callback_query(F.data.startswith("back_to_menu:"))
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    username = callback.from_user.username
    info = get_user_info(username)
    if not info or not info["roles"]:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    data = await state.get_data()
    role = data.get("role") or info["roles"][0]

    active_message_ids = data.get("active_message_ids", [])
    for msg_id in active_message_ids:
        try:
            await callback.bot.delete_message(chat_id=callback.message.chat.id, message_id=msg_id)
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")

    try:
        await callback.message.delete()
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞: {e}")

    kb = get_menu_inline_keyboard_for_role(role)
    sent_menu_msg = await callback.message.answer(f"üìã –ú–µ–Ω—é —Ä–æ–ª–∏: {role}", reply_markup=kb)

    await state.update_data(active_message_ids=[sent_menu_msg.message_id])
    await callback.answer()
