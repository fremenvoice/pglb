import logging
import os

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import CallbackQuery, FSInputFile, InlineKeyboardMarkup, InlineKeyboardButton

from telegram_bot.services.access_control import get_user_info
from telegram_bot.services.text_service import get_text_block, render_welcome
from telegram_bot.domain.menu_registry import menu_by_role
from telegram_bot.keyboards.inline import (
    get_menu_inline_keyboard_for_role,
    get_admin_role_choice_keyboard,
    get_back_to_menu_keyboard
)

router = Router()
logger = logging.getLogger(__name__)

@router.callback_query(F.data.startswith("menu:"))
async def handle_menu_callback(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø—É–Ω–∫—Ç–∞ –º–µ–Ω—é (menu_by_role[role]).
    –ï—Å–ª–∏ qr_scanner.md => scanning_role=role (admin/operator/consultant).
    """
    username = callback.from_user.username
    label = callback.data.split("menu:")[1]

    info = get_user_info(username)
    if not info or not info["roles"]:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    data = await state.get_data()
    role = data.get("role") or info["roles"][0]
    menu = menu_by_role.get(role, [])

    try:
        await callback.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ –º–µ–Ω—é: {e}")

    message_ids = []

    for item_label, filename in menu:
        if item_label == label:
            text = get_text_block(filename)

            if filename in ("visitors.md", "emergency.md"):
                sent_text = await callback.message.answer(text)
                message_ids.append(sent_text.message_id)

                img_filename = "sitmap.png" if filename == "visitors.md" else "fireext.png"
                img_path = os.path.join("telegram_bot", "domain", "img", img_filename)
                sent_photo = await callback.message.answer_photo(
                    photo=FSInputFile(img_path),
                    reply_markup=get_back_to_menu_keyboard(role)
                )
                message_ids.append(sent_photo.message_id)

            elif filename == "qr_scanner.md":
                # –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                await state.update_data(scanning_role=role)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é + –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞

                # –ï—Å–ª–∏ –∞–¥–º–∏–Ω => "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏" (admin_back)
                # –ò–Ω–∞—á–µ => "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" (back_to_menu:role)
                if role == "admin":
                    back_callback = "admin_back"
                    back_text = "–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏"
                else:
                    back_callback = f"back_to_menu:{role}"
                    back_text = "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"

                kb = InlineKeyboardMarkup(inline_keyboard=[[
                    InlineKeyboardButton(text=back_text, callback_data=back_callback)
                ]])
                sent_msg = await callback.message.answer(text, reply_markup=kb)
                message_ids.append(sent_msg.message_id)

            else:
                # –ü—Ä–æ—á–∏–µ –ø—É–Ω–∫—Ç—ã: –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç + "–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
                sent_msg = await callback.message.answer(
                    text,
                    reply_markup=get_back_to_menu_keyboard(role)
                )
                message_ids.append(sent_msg.message_id)

            active_ids = data.get("active_message_ids", [])
            active_ids += message_ids
            await state.update_data(active_message_ids=active_ids)

            await callback.answer()
            return

    await callback.answer("‚ö†Ô∏è –†–∞–∑–¥–µ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@router.callback_query(F.data.startswith("admin_menu:"))
async def handle_admin_menu_choice(callback: CallbackQuery, state: FSMContext):
    """
    –ö–æ–≥–¥–∞ –∞–¥–º–∏–Ω –Ω–∞ —ç–∫—Ä–∞–Ω–µ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–µ–π –Ω–∞–∂–∏–º–∞–µ—Ç –∫–∞–∫—É—é-—Ç–æ –∫–Ω–æ–ø–∫—É,
    e.g. admin_menu:operator => role=operator
         admin_menu:qr_scanner => role=admin + scanning_role=admin
    """
    choice = callback.data.split("admin_menu:")[1]
    username = callback.from_user.username
    info = get_user_info(username)

    if not info or "admin" not in info["roles"]:
        await callback.answer("‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–ª admin_menu:qr_scanner => scanning_role=admin
    if choice == "qr_scanner":
        await state.update_data(role="admin", scanning_role="admin")
        text = get_text_block("qr_scanner.md")
        kb = InlineKeyboardMarkup(inline_keyboard=[[
            InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É —Ä–æ–ª–∏", callback_data="admin_back")
        ]])
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ => –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        await callback.message.edit_text(text, reply_markup=kb)
        await callback.answer()
        return

    # –ò–Ω–∞—á–µ operator/consultant/none
    await state.update_data(role=choice)

    if choice == "none":
        text = get_text_block("about_park.md")
        kb = get_menu_inline_keyboard_for_role("admin", only_back=True)
        await callback.message.edit_text(text, reply_markup=kb)
    else:
        kb = get_menu_inline_keyboard_for_role(choice)
        await callback.message.edit_text(f"üìã –ú–µ–Ω—é —Ä–æ–ª–∏: {choice}", reply_markup=kb)

    await callback.answer()


@router.callback_query(F.data == "admin_back")
async def handle_admin_back(callback: CallbackQuery, state: FSMContext):
    """
    –í–æ–∑–≤—Ä–∞—Ç –∫ "–≤—ã–±–æ—Ä—É —Ä–æ–ª–∏" –¥–ª—è –∞–¥–º–∏–Ω–∞. –£–¥–∞–ª—è–µ–º –≤—Å–µ active_message_ids, scanning_role.
    """
    username = callback.from_user.username
    info = get_user_info(username)
    if not info or "admin" not in info["roles"]:
        await callback.answer("‚ö†Ô∏è –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    from telegram_bot.services.text_service import render_welcome
    full_name = info["full_name"]
    text = render_welcome(full_name, "admin")
    kb = get_admin_role_choice_keyboard()

    data = await state.get_data()
    active_ids = data.get("active_message_ids", [])
    for msg_id in active_ids:
        try:
            await callback.bot.delete_message(callback.message.chat.id, msg_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")

    try:
        await callback.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å admin_back-–∫–Ω–æ–ø–∫—É: {e}")

    # –û—á–∏—â–∞–µ–º FSM
    await state.clear()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π
    await callback.message.answer(text, reply_markup=kb)
    await callback.answer()


@router.callback_query(F.data.startswith("back_to_menu:"))
async def back_to_main_menu(callback: CallbackQuery, state: FSMContext):
    """
    –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è operator/consultant
    """
    username = callback.from_user.username
    info = get_user_info(username)
    if not info or not info["roles"]:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    data = await state.get_data()
    role = data.get("role") or info["roles"][0]

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ ID (–≤–∫–ª—é—á–∞—è —Ñ–æ—Ç–æ, bot-—Å–æ–æ–±—â–µ–Ω–∏—è)
    active_ids = data.get("active_message_ids", [])
    for msg_id in active_ids:
        try:
            await callback.bot.delete_message(chat_id=callback.message.chat.id, message_id=msg_id)
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {msg_id}: {e}")

    # –£–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫—É
    try:
        await callback.message.delete()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–Ω–æ–ø–∫—É –º–µ–Ω—é: {e}")

    # –û—á–∏—â–∞–µ–º FSM (–Ω–æ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –æ—Å—Ç–∞–≤–ª—è–µ–º role)
    data["active_message_ids"] = []
    data["scanning_role"] = None
    await state.update_data(data)

    kb = get_menu_inline_keyboard_for_role(role)
    new_msg = await callback.message.answer(f"üìã –ú–µ–Ω—é —Ä–æ–ª–∏: {role}", reply_markup=kb)
    await state.update_data(active_message_ids=[new_msg.message_id])

    await callback.answer()
