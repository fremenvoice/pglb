import os
import logging
from aiogram.types import FSInputFile

logger = logging.getLogger(__name__)

# –ü—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
IMG_DIR = os.path.join(os.path.dirname(__file__), "..", "domain", "img")

# –ö–µ—à –∫–∞—Ä—Ç–∏–Ω–æ–∫: {filename: FSInputFile}
_image_cache: dict[str, FSInputFile] = {}


async def preload_images():
    """
    –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ IMG_DIR –≤ –∫–µ—à.
    """
    global _image_cache
    _image_cache = {}

    if not os.path.isdir(IMG_DIR):
        logger.warning(f"‚ùå –ö–∞—Ç–∞–ª–æ–≥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω: {IMG_DIR}")
        return

    for filename in os.listdir(IMG_DIR):
        if not filename.lower().endswith((".png", ".jpg", ".jpeg", ".webp")):
            continue

        filepath = os.path.join(IMG_DIR, filename)
        try:
            _image_cache[filename] = FSInputFile(filepath)
            logger.info(f"üñºÔ∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤ –∫–µ—à: {filename}")
        except Exception as e:
            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {filename}: {e}")


def get_image(filename: str) -> FSInputFile | None:
    """
    –ü–æ–ª—É—á–∞–µ—Ç FSInputFile –∏–∑ –∫–µ—à–∞ –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞.
    """
    image = _image_cache.get(filename)
    if image is None:
        logger.warning(f"‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –∫–µ—à–µ.")
    return image
