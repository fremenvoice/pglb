import os
import csv
import requests
import logging
from io import StringIO

from telegram_bot.services.database import get_connection
from telegram_bot.services.sheets_connector import fetch_csv
from telegram_bot.app.config import (
    SPREADSHEET_ID_OPERATORS,
    SPREADSHEET_ID_CONSULTANTS,
    SPREADSHEET_ID_PHONES,
    GID_OPERATORS,
    GID_CONSULTANTS,
    GID_PHONES,
)

logger = logging.getLogger(__name__)

# –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞–¥–º–∏–Ω—ã: username -> full_name
FIXED_ADMINS = {
    "fremen_voice": "–î–∞–Ω–∏–∏–ª –ò–≤–∞–Ω–æ–≤",
    "Unchained7": "–ê—Ä—Ç—É—Ä –°–∫–æ–ø–∏–Ω",
    "BogdyDogg": "–ë–æ–≥–¥–∞–Ω –ö–æ–ª–∏–±–∞–±—á—É–∫",
    "AdmLetnegoSada2024": "–î–µ–∂—É—Ä–Ω—ã–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
    "Latekaterina85": "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞ –õ–∞—Ç–∫–æ–≤–∞",
    "milana_andreevna_s": "–ú–∏–ª–∞–Ω–∞ –°—É–≤–æ—Ä–æ–≤–∞",
    "Zakolebalas": "–ö—Å–µ–Ω–∏—è –ö—É–¥—Ä—è—à–æ–≤–∞",
}


def load_all_from_sheets():
    logger.info("üì• –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets...")

    operators = fetch_csv(SPREADSHEET_ID_OPERATORS, GID_OPERATORS)
    consultants = fetch_csv(SPREADSHEET_ID_CONSULTANTS, GID_CONSULTANTS)
    phones = fetch_csv(SPREADSHEET_ID_PHONES, GID_PHONES)

    logger.info(f"üë∑ –ù–∞–π–¥–µ–Ω–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤: {len(operators)}, –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–≤: {len(consultants)}, —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤: {len(phones)}")

    return {
        "operators": [row[0].strip() for row in operators if row],
        "consultants": [row[0].strip() for row in consultants if row],
        "phones": [
            {"full_name": row[0].strip(), "username": row[2].strip()}
            for row in phones if len(row) >= 3 and row[2].strip()
        ]
    }


def sync_users_to_db():
    logger.info("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ —Ä–æ–ª–µ–π —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö...")

    data = load_all_from_sheets()
    operator_fios = set(data["operators"])
    consultant_fios = set(data["consultants"])
    phone_map = {p["full_name"]: p["username"] for p in data["phones"]}

    # –î–æ–±–∞–≤–∏–º —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ
    for username, full_name in FIXED_ADMINS.items():
        if full_name not in phone_map:
            phone_map[full_name] = username
            logger.debug(f"üë§ –î–æ–±–∞–≤–ª–µ–Ω —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–¥–º–∏–Ω: {full_name} (@{username})")

    with get_connection() as conn:
        with conn.cursor() as cur:
            # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Ä–æ–ª–∏ –µ—Å—Ç—å
            for role in ["operator", "consultant", "admin"]:
                cur.execute("INSERT INTO roles (name) VALUES (%s) ON CONFLICT DO NOTHING", (role,))

            created, updated = 0, 0

            for fio, username in phone_map.items():
                roles = []

                if fio in operator_fios:
                    roles.append("operator")
                if fio in consultant_fios:
                    roles.append("consultant")
                if username in FIXED_ADMINS:
                    roles.append("admin")

                if not roles:
                    continue

                cur.execute("""
                    INSERT INTO users (full_name, username)
                    VALUES (%s, %s)
                    ON CONFLICT (username) DO UPDATE SET full_name = EXCLUDED.full_name
                    RETURNING id
                """, (fio, username))
                user_id = cur.fetchone()[0]
                updated += 1

                cur.execute("DELETE FROM user_roles WHERE user_id = %s", (user_id,))
                for role in roles:
                    cur.execute("SELECT id FROM roles WHERE name = %s", (role,))
                    role_id = cur.fetchone()[0]
                    cur.execute("INSERT INTO user_roles (user_id, role_id) VALUES (%s, %s)", (user_id, role_id))

            conn.commit()
            logger.info(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {updated} –∑–∞–ø–∏—Å–µ–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ.")

if __name__ == "__main__":
    sync_users_to_db()
