# telegram_bot/services/text_service.py

import os
import re
import logging
import asyncio
import aiofiles  # ‚Üê –î–û–ë–ê–í–õ–ï–ù–û

logger = logging.getLogger(__name__)
BASE_PATH = os.path.join(os.path.dirname(__file__), "..", "domain", "text_blocks")

# –ö–µ—à —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤: {filename: content}
_text_blocks: dict[str, str] = {}

role_display_names = {
    "admin": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
    "consultant": "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç",
    "operator": "–û–ø–µ—Ä–∞—Ç–æ—Ä",
    "operator_rent": "–û–ø–µ—Ä–∞—Ç–æ—Ä –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞"
}


def escape_markdown(text: str) -> str:
    escape_chars = r'([\\*_{}\[\]()#+\-.!])'
    return re.sub(escape_chars, r'\\\1', text)


def get_text_block(filename: str) -> str:
    """
    –ë—ã—Å—Ç—Ä—ã–π –¥–æ—Å—Ç—É–ø –∫ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –±–ª–æ–∫—É –∏–∑ –∫–µ—à–∞.
    –ï—Å–ª–∏ —Ñ–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω ‚Äî –≤—ã–¥–∞—Å—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.
    """
    content = _text_blocks.get(filename)
    if content is None:
        logger.warning(f"‚ö†Ô∏è –ë–ª–æ–∫ —Ç–µ–∫—Å—Ç–∞ {filename} –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –≤ –∫–µ—à.")
        return f"‚ö†Ô∏è –ë–ª–æ–∫ —Ç–µ–∫—Å—Ç–∞ `{escape_markdown(filename)}` –Ω–µ –Ω–∞–π–¥–µ–Ω."
    return content


def render_welcome(full_name: str, role: str) -> str:
    raw_template = get_text_block("welcome.md")
    role_display = role_display_names.get(role, role)

    full_name_safe = escape_markdown(full_name)
    role_safe = escape_markdown(role_display)

    return raw_template.format(–§–ò–û=full_name_safe, role=role_safe)


async def preload_text_blocks():
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç –≤—Å–µ .md —Ñ–∞–π–ª—ã –∏–∑ text_blocks –≤ –ø–∞–º—è—Ç—å.
    """
    global _text_blocks
    _text_blocks = {}

    if not os.path.isdir(BASE_PATH):
        logger.warning(f"‚ùå –ö–∞—Ç–∞–ª–æ–≥ text_blocks –Ω–µ –Ω–∞–π–¥–µ–Ω: {BASE_PATH}")
        return

    for filename in os.listdir(BASE_PATH):
        if not filename.endswith(".md"):
            continue

        filepath = os.path.join(BASE_PATH, filename)
        try:
            async with aiofiles.open(filepath, "r", encoding="utf-8") as f:
                content = await f.read()
                _text_blocks[filename] = content
                logger.info(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω —Ç–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫: {filename}")
        except Exception as e:
            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ {filename}: {e}")
