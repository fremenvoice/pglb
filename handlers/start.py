from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import CommandHandler, ContextTypes
from services.text_service import render_text_block, get_text_block
from services.access_control import get_user_role
from services.db import get_connection
from pathlib import Path

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–æ–ª–µ–π –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
ROLE_LABELS = {
    "creator": "–°–æ–∑–¥–∞—Ç–µ–ª—å",
    "admin": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
    "operator": "–û–ø–µ—Ä–∞—Ç–æ—Ä",
    "consultant": "–ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç"
}

def get_full_name(username: str) -> str | None:
    with get_connection() as conn:
        with conn.cursor() as cur:
            cur.execute("SELECT full_name FROM users WHERE username = %s", (username,))
            row = cur.fetchone()
    return row["full_name"] if row else None

def get_admin_role_choice_keyboard() -> InlineKeyboardMarkup:
    keyboard = [
        [
            InlineKeyboardButton("üìã –ú–µ–Ω—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤", callback_data="admin_select_operator"),
            InlineKeyboardButton("üìã –ú–µ–Ω—é –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–≤", callback_data="admin_select_consultant")
        ],
        [
            InlineKeyboardButton("üôã –ë–µ–∑ —Ä–æ–ª–∏", callback_data="admin_select_none")
        ]
    ]
    return InlineKeyboardMarkup(keyboard)

def get_start_work_button(role: str) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫—É "–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ!" —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–≤.
    """
    if role == "operator" or role == "consultant":
        return InlineKeyboardMarkup([ 
            [InlineKeyboardButton("–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ!", callback_data="start_work")]
        ])
    return None

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    username = update.effective_user.username
    role = get_user_role(username)

    logo_path = Path("assets/logo.png")

    if role is None:
        # –î–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ä–æ–ª–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = get_text_block("about_park.md")
        if logo_path.exists():
            with logo_path.open("rb") as photo:
                await update.message.reply_photo(photo=photo, caption=text, parse_mode="Markdown")
        else:
            await update.message.reply_text(text, parse_mode="Markdown")
    else:
        # –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        full_name = get_full_name(username) or update.effective_user.full_name or username
        role_label = ROLE_LABELS.get(role, role)
        text = render_text_block("welcome.md", full_name=full_name, role_label=role_label)

        start_work_button = None
        keyboard = []

        # –î–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π ‚Äî –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏
        if role == "admin" or role == "creator":
            keyboard = list(get_admin_role_choice_keyboard().inline_keyboard)

        # –î–ª—è –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–æ–≤ ‚Äî –∫–Ω–æ–ø–∫–∞ "–ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ä–∞–±–æ—Ç–µ!"
        if role == "operator" or role == "consultant":
            start_work_button = get_start_work_button(role)

        if logo_path.exists():
            with logo_path.open("rb") as photo:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–∞–º–∏
                if start_work_button:
                    keyboard = start_work_button.inline_keyboard + keyboard
                await update.message.reply_photo(photo=photo, caption=text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
            if start_work_button:
                keyboard = start_work_button.inline_keyboard + keyboard
            await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode="Markdown")

start_handler = CommandHandler("start", start_command)
